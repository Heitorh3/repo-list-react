{"ast":null,"code":"import _slicedToArray from \"/home/heitor/Documentos/Desenvolvimento/repo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/heitor/Documentos/Desenvolvimento/repo-list/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../Components/Container';\nimport { Loading, Owner } from './style';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: false\n    };\n  }\n\n  async componentDidMount() {\n    const match = this.props.match;\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const _ref = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: true\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loading = _this$state.loading;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Carregando\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Voltar aos reposit\\xF3rios\"), React.createElement(Owner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, repository.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, repository.description)), React.createElement(IssueList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, issues.map));\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/home/heitor/Documentos/Desenvolvimento/repo-list/src/pages/Repository/index.js"],"names":["React","Component","Link","PropTypes","api","Container","Loading","Owner","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","per_page","setState","data","render","owner","avatar_url","login","name","description","map","propTypes","shape","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,SAA/B;AAEA,eAAe,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAS9CQ,KAT8C,GAStC;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,OAAO,EAAE;AAHL,KATsC;AAAA;;AAe9C,QAAMC,iBAAN,GAA0B;AAAA,UACdC,KADc,GACJ,KAAKC,KADD,CACdD,KADc;AAEtB,UAAME,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaR,UAAd,CAAnC;;AAFsB,iBAIO,MAAMS,OAAO,CAACC,GAAR,CAAY,CAC3ChB,GAAG,CAACiB,GAAJ,CAAS,UAASL,QAAS,EAA3B,CAD2C,EAE3CZ,GAAG,CAACiB,GAAJ,CAAS,UAASL,QAAS,SAA3B,EAAqC;AACjCE,MAAAA,MAAM,EAAE;AACJT,QAAAA,KAAK,EAAE,MADH;AAEJa,QAAAA,QAAQ,EAAE;AAFN;AADyB,KAArC,CAF2C,CAAZ,CAJb;AAAA;AAAA,UAIfZ,UAJe;AAAA,UAIHC,MAJG;;AActB,SAAKY,QAAL,CAAc;AACVb,MAAAA,UAAU,EAAEA,UAAU,CAACc,IADb;AAEVb,MAAAA,MAAM,EAAEA,MAAM,CAACa,IAFL;AAGVZ,MAAAA,OAAO,EAAE;AAHC,KAAd;AAKH;;AAEDa,EAAAA,MAAM,GAAG;AAAA,wBACmC,KAAKhB,KADxC;AAAA,UACGC,UADH,eACGA,UADH;AAAA,UACeC,MADf,eACeA,MADf;AAAA,UACuBC,OADvB,eACuBA,OADvB;;AAGL,QAAIA,OAAJ,EAAa;AACT,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AAED,WACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,EAEI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,GAAG,EAAEF,UAAU,CAACgB,KAAX,CAAiBC,UAD1B;AAEI,MAAA,GAAG,EAAEjB,UAAU,CAACgB,KAAX,CAAiBE,KAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKlB,UAAU,CAACmB,IAAhB,CALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAInB,UAAU,CAACoB,WAAf,CANJ,CAFJ,EAWI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYnB,MAAM,CAACoB,GAAnB,CAXJ,CADJ;AAeH;;AA1D6C;AAA7BvB,U,CACVwB,S,GAAY;AACflB,EAAAA,KAAK,EAAEX,SAAS,CAAC8B,KAAV,CAAgB;AACnBf,IAAAA,MAAM,EAAEf,SAAS,CAAC8B,KAAV,CAAgB;AACpBvB,MAAAA,UAAU,EAAEP,SAAS,CAAC+B;AADF,KAAhB;AADW,GAAhB,EAIJC;AALY,C","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nimport api from '../../services/api';\n\nimport Container from '../../Components/Container';\nimport { Loading, Owner } from './style';\n\nexport default class Repository extends Component {\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                repository: PropTypes.string,\n            }),\n        }).isRequired,\n    };\n\n    state = {\n        repository: {},\n        issues: [],\n        loading: false,\n    };\n\n    async componentDidMount() {\n        const { match } = this.props;\n        const repoName = decodeURIComponent(match.params.repository);\n\n        const [repository, issues] = await Promise.all([\n            api.get(`/repos/${repoName}`),\n            api.get(`/repos/${repoName}/issues`, {\n                params: {\n                    state: 'open',\n                    per_page: 5,\n                },\n            }),\n        ]);\n\n        this.setState({\n            repository: repository.data,\n            issues: issues.data,\n            loading: true,\n        });\n    }\n\n    render() {\n        const { repository, issues, loading } = this.state;\n\n        if (loading) {\n            return <Loading>Carregando</Loading>;\n        }\n\n        return (\n            <Container>\n                <Link to=\"/\">Voltar aos reposit√≥rios</Link>\n                <Owner>\n                    <img\n                        src={repository.owner.avatar_url}\n                        alt={repository.owner.login}\n                    />\n                    <h1>{repository.name}</h1>\n                    <p>{repository.description}</p>\n                </Owner>\n\n                <IssueList>{issues.map}</IssueList>\n            </Container>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}